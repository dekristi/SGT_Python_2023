create schema sgt_hmw_tasks;

use sgt_hmw_tasks;

CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    employee_name VARCHAR(50),
    age INT,
    salary DECIMAL(10, 2),
    department VARCHAR(50)
);

INSERT INTO employees (employee_id, employee_name, age, salary, department)
VALUES
    (1, 'John Doe', 35, 50000.00, 'Sales'),
    (2, 'Jane Smith', 28, 42000.00, 'HR'),
    (3, 'Mike Johnson', 42, 60000.00, 'Finance'),
    (4, 'Emily Brown', 29, 48000.00, 'IT'),
    (5, 'David Lee', 38, 55000.00, 'Sales');

CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(50),
    age INT,
    city VARCHAR(50)
);

INSERT INTO customers (customer_id, customer_name, age, city)
VALUES
    (101, 'Alice Johnson', 25, 'New York'),
    (102, 'Bob Smith', 30, 'Los Angeles'),
    (103, 'Eva Lee', 28, 'Chicago'),
    (104, 'Mike Brown', 35, 'Houston'),
    (105, 'Sophia Wang', 22, 'San Francisco');

CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_total DECIMAL(10, 2)
);

INSERT INTO orders (order_id, customer_id, order_total)
VALUES
    (1, 101, 120.50),
    (2, 102, 250.75),
    (3, 103, 70.20),
    (4, 101, 80.00),
    (5, 105, 150.30);

CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(50),
    category VARCHAR(50),
    price DECIMAL(10, 2)
);

INSERT INTO products (product_id, product_name, category, price)
VALUES
    (201, 'Widget A', 'Electronics', 25.50),
    (202, 'Gadget B', 'Electronics', 35.20),
    (203, 'Tool C', 'Hardware', 15.80),
    (204, 'Toy D', 'Toys', 10.99),
    (205, 'Appliance E', 'Home', 75.60);

CREATE TABLE sales (
    sale_id INT PRIMARY KEY,
    product_id INT,
    sale_date DATE,
    quantity INT,
    revenue DECIMAL(10, 2)
);

INSERT INTO sales (sale_id, product_id, sale_date, quantity, revenue)
VALUES
    (301, 201, '2023-07-01', 5, 127.50),
    (302, 202, '2023-07-02', 2, 70.40),
    (303, 201, '2023-07-03', 3, 76.50),
    (304, 204, '2023-07-03', 10, 109.90),
    (305, 205, '2023-07-04', 1, 75.60);

/* Task: Retrieve all columns from the "employees" table.*/
     
   select * 
   from employees;
   
   /*- Task: Find the names and ages of all employees whose age is above 30.*/
   
   select employee_name, age
   from employees
   where age > 30;
   
   /*- Task: List the unique cities in the "customers" table.*/
   
   select distinct(city)
   from customers;
   
   /*- Task: Calculate the total number of orders in the "orders" table.*/
   select count(order_total) as number_of_orders
   from orders;
   
   /*- Task: Find the average price of all products in the "products" table.*/
   select round(avg(price),2) as mean_price
   from products;
   
  /*- Task: Calculate the total sales amount for each product in the "sales" table.*/
  
  select product_id, sum(revenue) as sales_amount
  from sales
  group by product_id;
  
 /*- Task: Find the number of customers in each country from the "customers" table.*/ /*There is no column country*/
 select count(*) num_of_customers
 from customers c 
 group by city;
  
  /*- Task: Calculate the average salary for each department in the "employees" table.*/
select department , avg(salary) as mean_salary
from employees e 
group by department ;

/*- Task: List the highest and lowest prices for each category in the "products" table.*/

select category , min(price) as cat_lowest_price, max(price) as cat_highest_price
from products p 
group by category ;

/*- Task: Find the number of orders placed by each customer in the "orders" table.*/

select customer_id, count(*) as num_of_orders 
from orders o 
group by customer_id ;

/*- Task: Calculate the total revenue generated by the company from the "sales" table.*/
select sum(revenue) as total_revenue
from sales s ;

/* - Task: Find the highest salary among all employees in the "employees" table.*/
select max(salary) as highest_salary
from employees e ;

/*- Task: Calculate the average age of employees in the "employees" table.*/
select avg(age)as mean_age
from employees e ;

/*- Task: Determine the number of distinct products in the "products" table.*/
select count(distinct(product_name)) as num_of_unique_prod
from products p ;

/*- Task: Calculate the total quantity sold for each product in the "sales" table.*/
select product_id, count(*) as quantity_sold
from sales s 
group by product_id ;

/*Retrieve the top 5 employees with the highest salaries from the "employees" table.*/
select employee_name, salary  
from employees e 
order by salary desc 
limit 5;

/*Find the names of all customers who have placed orders in the "customers" table.*/
select c.customer_name, o.order_id 
from customers c 
join orders o on c.customer_id = o.customer_id ;

/*- Task: Calculate the running total sales for each month in the "sales" table.*/
select year(sale_date) as sale_year, 
	month(sale_date) as sale_month, 
	sum(revenue) as total_revenue
from sales s 
group by year(sale_date), month(sale_date)
order by year(sale_date), month(sale_date) ;

/*- Task: Determine the average sales amount over a 3-month sliding window for each product in the "sales" table.*/
select sale_date, revenue, 
	avg(revenue) over (partition by product_id order by sale_date rows between current row and 2 following) as prod_mean_revenue,
	avg(revenue) over (order by sale_date rows between current row and 2 following) as threeM_mean_revenue
from sales s 
order by sale_date ;

/*Rank customers based on their total order amounts in the "orders" table.*/
select customer_id , 
	row_number() over (partition by customer_id order by order_total desc) as cust_rank
from orders o ;

/*- Task: Calculate the cumulative sum of revenue for each product in the "sales" table.*/
select distinct(product_id), 
		sum(revenue) over (partition by product_id) as cumulative_revenue
from sales s ;

/*- Task: Find the moving average of prices for each product over a 5-day window in the "products" table.*/
select product_id, product_name, 
		avg(price) over (partition by product_name order by product_id 
		rows between 5 preceding and current row) as moving_mean_price
from products p ;

/*- Task: Assign percentile ranks to employees based on their salaries in the "employees" table.*/
select employee_id, employee_name, 
		salary, percent_rank() over (order by employee_id) * 100 as percentile_salary 
from employees e ;

select e.employee_id , e.employee_name, e.salary, 
	round(((e.salary / (select  sum(em.salary) from employees em)) * 100),2) AS percentile_salary
from employees e ;

/*- Task: Retrieve the previous salary for each employee in the "employees" table, considering 0 as the default value for the first row.*/

select employee_id,  employee_name, salary,
		lag(salary,1,0) over (order by employee_id) as previous_salary
from employees e 

/*- Task: Calculate the sum of revenue for each product within a 2-day window, including the current row, in the "sales" table.*/
select product_id , revenue ,
	sum(revenue) over(partition by product_id order by product_id rows between 1 preceding and 1 following) as two_day_sum
from sales s 

  
  